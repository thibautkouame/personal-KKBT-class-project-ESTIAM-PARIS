# -*- coding: utf-8 -*-
"""TP2_BI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bE6XRVIebevF95qBG4-j569pmXI__-Kr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.stats import pearsonr

"""PREPARATION ET CHARGEMENT DES DONNEES"""

#Chargement du dataset
import kagglehub

# Download latest version
path = kagglehub.dataset_download("carrie1/ecommerce-data")
print("Path to dataset files:", path)
file_path = os.path.join(path, 'data.csv')
data = pd.read_csv(file_path, on_bad_lines = 'skip', header= 0, encoding='latin1')

#Comprehension du dataset
data.columns

data.info()

data.describe()

data.head(10)

#Verification et traitement des valeurs manquantes
data.isnull().sum()

# suppression des valeurs manquantes
data = data.dropna()
data.isnull().sum()

"""Conversion des types de données"""

# conversion de la data en date
data['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])

#Creation de nouvelles variables
#création de la variable date
data['Date'] = data['InvoiceDate'].dt.strftime('%Y-%m-%d')
#Création de la variable year
data['Year'] = data['InvoiceDate'].dt.strftime('%Y')
#Création de la variable month
data['Month'] = data['InvoiceDate'].dt.strftime('%B')
# création de la variable heure
data['Hour'] = data['InvoiceDate'].dt.strftime('%H:%M')
#creation de la variable days
data['Week_day'] = data['InvoiceDate'].dt.strftime('%A')
data.sample(10)

#Suppression des doublons et des valeurs aberrantes
data.duplicated().sum() # Vérification de l'existence de doublons

data.drop_duplicates(inplace=True) # Suppression des doublons

#suppression des quantités négatives
data = data[data['Quantity'] > 0]

"""EXPLORATION DES TENDANCES DE VENTES"""

#NOMBRES DE TRANSACTIONS PAR MOIS
monthly_transactions = data.groupby('Month').agg({'InvoiceNo': 'nunique'}).reset_index()
monthly_transactions

monthly_transactions['ordre'] = np.array([4,8,12,2,1,7,6,3,5,11,9,10])# création d'une colonne pour le mois en numérique
monthly_transactions = monthly_transactions.sort_values(by='ordre')# Trie pour avoir les mois les rangé de Janvier à Décembre
monthly_transactions

# graphique du nombre de transaction par mois
plt.figure(figsize=(10,6))
plt.plot(monthly_transactions['Month'], monthly_transactions['InvoiceNo'], marker='o')
plt.title('Nombre de transactions par mois')
plt.xlabel('Mois')
plt.ylabel('Nombre de transactions')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

#Jours et heures avec les ventes les plus élevés
top_days = data.groupby('Week_day').agg({'InvoiceNo': 'nunique'}).reset_index()
#heures avec les ventes les plus élevés
top_hours = data.groupby('Hour').agg({'InvoiceNo': 'nunique'}).reset_index()
top_hours = top_hours.sort_values(by='InvoiceNo', ascending=False)
top_hours = top_hours.head(7)

#Les graphiques
plt.figure(figsize=(10,10))
plt.subplot(2, 1, 1)
plt.bar(top_days['Week_day'], top_days['InvoiceNo'])
plt.title('Jours avec les ventes les plus élevés')
plt.xlabel('Jour')
plt.ylabel('Nombre de transactions')

plt.subplot(2, 1, 2)
plt.bar(top_hours['Hour'], top_hours['InvoiceNo'])
plt.title('Heures avec les ventes les plus élevés')
plt.xlabel('Heure')
plt.ylabel('Nombre de transactions')
plt.show()

#Les 10 produits les plus vendu
top_products = data.groupby('Description').agg({'InvoiceNo': 'nunique'}).reset_index()
top_products = top_products.sort_values(by='InvoiceNo', ascending=False)
top_products = top_products.head(10)

#graphique des 10 produits
plt.figure(figsize=(10,6))
plt.bar(top_products['Description'], top_products['InvoiceNo'])
plt.title('Les 10 produits les plus vendus')
plt.xlabel('Produit')
plt.ylabel('Nombre de transactions')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()

# Repartition des ventes par pays
country_sales = data.groupby('Country').agg({'InvoiceNo': 'nunique'}).reset_index()
# graphique
plt.figure(figsize=(10,6))
plt.bar(country_sales['Country'], country_sales['InvoiceNo'])
plt.title('Repartition des ventes par pays')
plt.xlabel('Pays')
plt.ylabel('Nombre de transactions')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()

"""ANALYSE DES COMPORTEMENTS CLIENTS"""

# Le panier moyen par client
client_basket = data.groupby('CustomerID').agg({'InvoiceNo': 'nunique'}).reset_index() # le nombres de paniers pour chaque client
average_basket = client_basket['InvoiceNo'].mean()

#distribution du panier moyen avec matplotlib
plt.figure(figsize=(10,6))
plt.hist(average_basket, bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution du panier moyen par client')
plt.xlabel('Panier moyen')
plt.ylabel
plt.show()

# Nombre de clients ayant effectué des achats répétés
client_multiple_purchase = client_basket[client_basket['InvoiceNo'] > 1]
num_clients_multiple_purchase = len(client_multiple_purchase)
num_clients_multiple_purchase

#clients avec le plus d'achats
best_clients = client_basket.sort_values(by='InvoiceNo', ascending=False)
best_clients = best_clients.head(10)
best_clients

#graphique en barre des clients
plt.figure(figsize=(10,6))
plt.bar(best_clients['CustomerID'], best_clients['InvoiceNo'])
plt.title("Clients avec le plus d'achats")
plt.xlabel('Client')
plt.ylabel('Nombre de transactions')
plt.grid(True)
plt.show()

"""ANALYSE DES PERFORMANCES CLIENTS"""

#Quels sont les produits les plus rentables
top_products = data.groupby('Description').agg({'InvoiceNo': 'nunique'}).reset_index()
top_products = top_products.sort_values(by='InvoiceNo', ascending=False)
top_products = top_products.head(10)

# graphique
plt.figure(figsize=(10,6))
plt.bar(top_products['Description'], top_products['InvoiceNo'])
plt.title('Les 10 produits les plus rentables')
plt.xlabel('Produit')
plt.ylabel
plt.xticks(rotation=90)
plt.grid(True)
plt.show()

# Correlation entre prix unitaire et quaantité vendue
pearsonr(data['UnitPrice'], data['Quantity'])

"""Pvalue est inférieure à 5 alors les variables ne sont pas indépendantes"""

#Nuage de point
plt.figure(figsize=(10,6))
plt.scatter(data['UnitPrice'], data['Quantity'], alpha=0.5)

#La distribution des prix produits

